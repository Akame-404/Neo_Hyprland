"use strict";(globalThis.webpackChunknotion_next=globalThis.webpackChunknotion_next||[]).push([[90959],{190959:(o,e,n)=>{n.r(e);n(757658),n(21703);var t=n(292595),r=n(401898),s=n(516861);const a={create:"Creating transaction",cancel:"Cancelling transaction",commitEmpty:"Ignoring empty transaction",commit:"Committing transaction"},l={err_no_multiselection:"Unable to get multi-selection for operation",err_no_store_position:"Unable to get store position for operation",err_no_source_block_store:"Unable to find source block store",err_no_target_block_store:"Unable to find target block store"},c=new WeakMap,i={onApplyOperation(o){let{operation:e,store:n}=o;const t=e.args,s=[];if(e.path.length&&s.push(`@ ${e.path.join(".")}`),("set"===e.command||"update"===e.command)&&(0,r.Kn)(t)&&!Array.isArray(t)){const o=Object.keys(t),e=3,n=o.slice(0,e).join(", ");o.length<=e?s.push(`{${n}}`):s.push(`{${n}, and ${o.length-e} more}`)}console.groupCollapsed(`%c  Applying operation %c${e.command}%c ${s.join(" ")}`,"font-weight: normal","font-weight: normal; color: blue","font-weight: normal"),console.log(e),console.log(n),console.trace(),console.groupEnd()},onTransactionEvent(o,e){const n=e.getUserActionForAnalyticsPurposesOnly(),t=a[o];console.groupCollapsed(`${t} ${n}`),console.log(e),console.trace(),console.groupEnd()},onSaveTransactions(o,e){const n=e.length,t=o.length!==n,r=t?` (squashed from ${o.length} transactions)`:"",s=`${n} transaction${n>1?"s":""}`;console.groupCollapsed(`Sending ${s} to server${r}`),t?(console.log("Unsquashed transactions:",o),console.log("Squashed transactions:",e)):console.log(e),console.groupEnd();const a=performance.now();return o=>{if("success"===o.type){const o=Math.ceil(performance.now()-a);console.log(`${s}${r} accepted by server after ${o} ms`)}else{var e;const n=`HTTP ${o.status}, ${JSON.stringify(null===(e=o.body)||void 0===e?void 0:e.debugMessage)}`;console.groupCollapsed(`%cFailed to send ${s} to server${r} (${n})`,"color: red"),console.log(o),console.groupEnd()}}},rememberStackTrace(o){const{stack:e}=new Error;if(e)for(const n of o)c.set(n,e)},logInvertedTextOperationError(o){let{invertedOperation:e,maybeRemappedInvertedOperation:n,errorCode:t,transaction:r}=o;console.groupCollapsed(`%c  Error %c${t}%c applying inverted text operation %c${e.command}%c from transaction "${r.getUserActionForAnalyticsPurposesOnly()}"`,"font-weight: normal","font-weight: normal; color: red","font-weight: normal","font-weight: normal; color: blue","font-weight: normal"),console.log(`Error description: ${l[t]}`),e===n?console.log("Inverted operation:",e):(console.log("Original inverted operation:",e),console.log("Remapped inverted operation:",n));const s=c.get(e);s&&console.log("Stack trace at creation of inverted operation:",s),console.trace(),console.groupEnd()}};t.exposeDebugValue("toggleTransactionDebugging",(()=>{const o=!s.Z.provider;s.Z.provider=o?i:void 0,console.log(`Transaction debugging is now ${o?"enabled":"disabled"}.`)})),s.Z.provider&&(console.log("Installing new transaction debug provider."),s.Z.provider=i)}}]);